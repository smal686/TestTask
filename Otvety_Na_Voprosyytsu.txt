1. Какие типы(методы) верстки вы знаете Приведите примеры в каких случаях какой тип(метод) необходимо использовать. 

Табличная верстка - это некая сетка которая создаться с помощью таблицы, которая делиться на колонки, а колонки на ячейки в которой можно расположить нужные элементы.

Плюсы табличной верстки

-сама по себе верстка простая
-легко обеспечить одинаковый вид во всех браузерах

Минусы табличной верстки

- много лишнего кода, большой вес страниц
- не каждый дизайн возможно создать
- медленная загрузка страниц 

Блочная верстка - вёрстка которая создаться с помощью слоев, а именно блоков div. На мой взгляд это метод самый востребованный на данный момент.

Плюсы блочной верстки

- Код стал компактнее по сравнению с табличной версткой.
- Можно легко изменять элементы, например, чтобы перенести блок с правой стороны, достаточно заменить floatleft на floatright. С таблицами это было гораздо труднее реализовать.
- Отличная индексация поисковиками. В табличной верстке контент раскинут по разным ячейкам что усложняет индексацию поисковыми роботами.
- Чистый и аккуратный код
- Быстрая загрузка страниц
- Слои можно накладывать друг на друга

Минусы блочной верстки

- сама по себе верстка сложная
- трудно обеспечить одинаковый вид во всех браузерах(Кроссбраузерность)
- при уменьшении разрешения экранабраузера блоки съезжают 
  друг на друга (нужна настройка в стилях под разрешения экрана) 

Вывод Если при создании сайт достичь полной кроссбраузерности и адаптивности то блочная верстка намного лучше, чем табличная!

Также существует
-Адаптивная вёрстка (Когда сайт адаптируется под любые мобильнее устройства и планшеты)
-Кроссбраузерная верстка (Когда сайт отображается одинаково во все браузерах)
-Семантическая верстка (Когда теги используются в соответствии со структурой документа)
-Валидная верстка (Когда соблюдения стандартов W3С)
-Резиновая верстка (Когда сайт растягивается на ширину равную разрешению экрана монитора)

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

2. Назовите наиболее популярные браузерные движки. Каким образом в css объявляется хак под определенный движок

-Gecko(Firefox)
-WebKit(Chrome и Safari)
-Presto(Opera)
-Trident(Internet Explorer)
-Edge(новый движок от компании Microsoft,т.к. IE потихоньку умирает)

Для того что бы объявить хак IE нужно написать следующий код в html(или php) документе

!--[if gte IE 6]
link href=cssstyle_ie.css rel=stylesheet type=textcss 
![endif]--

где в комментарий, в квадратных скобках указывается условие, которое
понимает только браузер IE, а всеми остальными браузерами игнорируется. То, что находится между if и endif IE выполнит. В данном случае подключится файл стилей CSS. В этом файле можно писать только те стили CSS, которые будут относиться к IE. Для того, чтобы точно определять, к каким версиям IE применять стили можно использовать дополнительные логические операторы.

- lt – версия меньше указанной
- lte – версия меньше или равно указанной
- gt – версия больше указанной
- gte - версия больше или равно указанной
При помощи других логических операторов (& - и,  - или, ! - не) выполнятся
группирование условных комментариев для различных версий IE.
- [if (IE 6) & (IE 7)] – 6-я версия И 7-я версия
- [if (IE 6)  (IE 7)] – 6-я версия ИЛИ 7-я версия
- [if !(IE 8)] – НЕ 8-я версия

так же в браузерах используются префиксы для экспериментальных CSS-свойств. Они называться вендорные префиксы. Это приставки, используемые производителями (вендорами) браузеров для экспериментальных, еще не принятых в стандарт, CSS-свойств.

Некоторых префиксов для браузеров
-o- — префикс для браузера Опера
-moz- — префикс для браузеров из семейства Mozilla
-ms — префикс для IE8 
-webkit- — префикс для браузеров, построенных на движке Webkit, в частности Safari и Chrome

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

3. Какие css Фреймворки вы знаете Какие использовали Можете назвать причины выбора определенного Фреймворка Выбери 2 Фреймворка и проведите анализ преимуществ и недостатков. 

- Bootstrap
- Skeleton
- Materialize
- Semantic UI
- Foundation

Работал всего с одним, и это конечно Bootstrap! Причина выбора именно этого Фреймворка, заключается в том, что он очень популярен и первым мне попался на пути изучение CSS-Фреймворков.
К сожалению, не смогу сравнить 2 Фреймворка, т.к. у меня нет опыта работы с другим фреймворком. Место этого расскажу про преимущество и недостатки Boostrap
Преимущество
- Чистый и аккуратный код
- Быстрая верстка
- Решение общих CSS вопросов
- Адаптивность
- Кроссбраузерность
- хорошая документация для изучения Фреймворка
Недостатки
- я не нашел недостатков

CSS-Фреймворки очень облегчают жизнь. 

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

4. Объясните своими словами что такое DOM 

Модель DOM похожа на html-код который я пишу, но это не совсем так! Браузер преобразует мой html-код в модель DOM. Если открыт панель инструментов разработчика, то там можно увидеть визуальное представление DOM. Он отличается от html-кода (может и не отличаться, но это редко), браузер сам вставляет элементы в модель DOM, например, если в коде есть ошибки, то браузер исправит их за меня. Допустим, у меня есть тэг table, и я пропустил обязательный тег tbody. Браузер сам добавит элемент tbody за меня, и он будет присутствовать в модели DOM, и я смогу найти этот элемент с помощью JavaScript и что-то с ним сделать, или написать стили CSS, даже если tbody нет в написанном HTML-коде. То есть JS манипулирует с моделью DOM, а не с самим html-кодом.HTML-код остаётся прежнем, а мы при помощи js работаем с моделью DOM и делаем с ней что хотим (Удаляем, добавляем, анимируем и т.д.) 

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

5. Что лежит в основе Javascript Характеризуйте его как инструмент - из чего он состоит, на чем построен, на каком типе транслятора он реализован. И выскажите свое мнение почему у Javascript нет конкуренции как например у серверных языков. 

Изначально Javascript это клиентский язык, созданный для взаимодействия с web-страницами и выполняется он, только на стороне клиента(браузера).JS развивался и стал популярным. Он научился манипулировать с серверам и с базами данных. Можно сделать вывод, чтобы теперь разработать веб приложение, от начала и до конца, можно знать только JavaScript (html и css не в счет).

JavaScript структурно состоит из трех частей

- Ядро (также известно как ECMAScript) является основой для функционирования остальных частей. В ядре реализуется синтаксис языка т.е. определяются ключевые и зарезервированные слова, условные конструкции, циклы, объекты и т.д. Ядро само по себе не имеет средств для вывода информации.

- Объектная модель браузера (Browser Object Model или сокращенно BOM). С помощью BOM Вы можете управлять поведением браузера из JavaScript, считывать информацию о браузере, выполнять код по расписанию и т.д.

- Объектная модель документа (Document Object Model или сокращенно DOM) это инструмент, с помощью которого языки программирования могут получать доступ к HTML и XML документам. Таким образом с помощью DOM Вы можете динамически изменять содержимое HTML и XML страниц.

У Javascript нет конкуренции с серверными языками, потому что скрипты, написанные на javascript, выполняются на стороне клиента, и не просто на стороне клиента, а в самом браузере, поэтому не требуется никаких дополнительных программ, никаких плагинов и т. п., скрипт можно просто вставить в html-код страницы, и он будет выполняться в любом браузере. Javascript - простой и удобный язык, позволяющий легко управлять содержимым веб-страницы, отслеживая самые различные действия пользователя, и реагируя на это. Благодаря этому, javascript практически не имеет конкурентов в своей области применения и является первым языком, изучение которого нужно начинать веб-разработчику.

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

6. Вам дали задачу. Как вы рассчитаете сроки исполнения 

Я оценю сложность всего задания, составлю график выполнения задач, определю реальные сроки(время) за сколько я смогу выполнить данную задачу. Это я называю внутренние сроки, которые касаются только меня! Заказчику же я озвучу клиентские сроки. Это получается время с запасом для того что избежать форс мажорных ситуации, выполнить заказ качественно, не куда не торопясь. Но буду стараться делать свою работу максимально быстро. 

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

7. Если задача вам не под силу, что вы будете делать 

Во-первых, не отчаиваться, потому что нет таких задач которые нельзя решить! Я буду стараться всеми своими силами решить данную проблему с которой столкнулся. Буду искать решения на просторах интернета, обращаться за консультации к более квалифицированным специалистам и рано или поздно у меня получить найти решения задачи т.к. я всегда добиваюсь своих целей если у меня что-то не получается это всего лишь вопрос времени.

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

8. Что вы ожидаете от работы в нашей команде 

Я хочу поучаствовать в разработке проекта и научиться работать в команде. Хочу получить опыт в web-разработки, закрепить уже полученные знания. Освоить нарезку макетов. Познакомиться с векторной графикой. Научиться работать с фреймворком (angularjs). Познать все тонкости и сложности frontend-разработки. 

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

9. Расскажите о своих перспективах и амбициях. Что вы хотите знать и кем вы хотите стать через 1 год, 2 года и 5 лет
 
Я занимаюсь web-разработкой уже примерно полгода. За это время я хорошо узнал язык разметки HTML и таблицу стилей CSS. Познакомился с двумя языками программирования, это JS и PHP. Знаю основу этих языков и понимаю принцип их работы. После знакомства с языками программирования выбрал для более углубленного изучения язык JS т.к. на мой взгляд у JS намного больше возможностей и перспектив в frontend-разработки. Так же JS можно работать, как и в frontend-разработки так и в backend -разработке(node.js)! Я хочу развиваться и расти как frontend-разработчик. Именно поэтому мой выбор пал на JS.

Через год я должен владеть в совершенстве HTMLCSS, у меня уже уверенные знания языка JS, знаю векторную графику, умею работать и применять на практике разные фреймворки и библиотеки. Поработать в команде удаленно или веб-студии, получить необходимый опыт для дальнейшего развития! Если в frontend-разработки все получиться, пойду в сторону backend-разработки.

Через два года я уже хороший и уверенный в себе frontend-разработчик который требуется спросом на рынке труда в сфере IT-технологий. Могу решать сложные задачи и не только на стороне клиента, но и на стороне сервера. Создавать собственный библиотеки. Расту дальше как WEB-разработчик.

Через 5 лет я уже полноценный WEB-разработчик, у которого за плечами большой опыт, наработанный годами! Запущено несколько стартапов, возможно собрана команда или открыта веб-студия для развития собственных проектов.






